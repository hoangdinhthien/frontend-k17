//rules validate
// email: required, email real (isEmail, c√≥ regex)
// ^[a-zA-Z\d\.\-\_]+(\+\d+)?@[a-zA-Z\d\.\-\_]{1,65}\.[a-zA-z]{1,7}$
// /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
// Name: required, L√† t√™n ng∆∞·ªùi (ti·∫øng anh ·ªè vi·ªát, ko ch·ª©a s·ªë), max 50 k√Ω t·ª±
// Gi·ªõi t√≠nh: required
// qu·ªëc gia: required
// password: required, min(8), max(20)
// ConfirmedPassword: required, min(8), max(20), real name (isSame)
// agree: required

const REG_EMAIL = /^[a-zA-Z\d\.\-\_]+(\+\d+)?@[a-zA-Z\d\.\-\_]{1,65}\.[a-zA-z]{1,7}$/;

const REG_NAME = /^[a-zA-Z\u00C0-\u024F\u1E00-\u1EFF]+((\s[a-zA-Z\u00C0-\u024F\u1E00-\u1EFF]+)?)+$/;

// m√¨nh s·∫Ω vi·∫øt m·∫•y c√°i h√†m nh·∫≠n v√†o value v√† check theo chu·∫©n g√¨ ƒë√≥: n·∫øu h·ª£p y√™u c·∫ßu th√¨ ""
// n·∫øu ko h·ª£p y√™u c·∫ßu th√¨ ch·ª≠i
const isRequired = ( value ) => value.trim() !== '' ? '' : 'That field is required';
const isEmail = ( value ) => REG_EMAIL.test( value ) ? '' : 'Email is not valid';
const isName = value => REG_NAME.test( value ) ? '' : 'Name is not valid';
const min = num => value => value.length >= num ? '' : `Minimum is ${num}`;
const max = num => value => value.length <= num ? '' : `Maximum is ${num}`;
const isSame = ( paramValue, fieldName1, fieldName2 ) => ( value ) => {
    return paramValue === value ? '' : `${fieldName1} not match ${fieldName2}`;
};


//NH·ªÆNG KH√ÅI NI·ªÜM C·∫¶N N·∫ÆM:
// VALUE: GI√Å TR·ªä TRONG √î INPUT
// FUNCS: NH·ªÆNG H√ÄM S·∫º D√ôNG ƒê·ªÇ CHECK VALUE
//      VD: ƒê·ªÇ CHECK VALUE EMAIL => FUNCS: [ISREQUIRED, ISEMAIL]
//      VD: ƒê·ªÇ CHECK VALUE PASSWORD => FUNCS: [ISREQUIRED, MIN(8), MAX(20)]

// parentNode: NODE CHA C·ª¶A VALUE
// controlNode: L√Ä TH·∫∞NG NODE INPUT


// VI·∫æT 1 H√ÄM D√ôNG ƒê·ªÇ B√ÅO L·ªñI TR√äN T·ª™NG INPUT 
const createMsg = ( parentNode, controlNodes, msg ) => {
    // T·∫†O DIV TH√îNG B√ÅO L·ªñI 
    const invalidDiv = document.createElement( 'div' );
    invalidDiv.className = 'invalid-feedback';
    invalidDiv.textContent = msg;
    parentNode.appendChild( invalidDiv );
    controlNodes.forEach( ( itemNode ) => {
        itemNode.classList.add( 'is-invalid' );
    } );
};

// h√†m x√≥a c√°c msg
const clearMsg = () => {
    document.querySelectorAll( ".is-invalid" ).forEach( ( inputItem ) => {
        inputItem.classList.remove( "is-invalid" );
    } );
    document.querySelectorAll( ".invalid-feedback" ).forEach( ( divMsg ) => {
        divMsg.remove();
    } );
};

// C·∫¶N 1 H√ÄM NH·∫¨N V√ÄO VALUE, NH·∫¨N V√ÄO FUNCS, PARENTNODE, CONTROLNODE
// ƒê·ªÇ N√ì D√ôNG C√ÅC FUNCS KI·ªÇM TRA VALUE, R·ªíI CREATMSG(PARENT, CONTROLNODE)
const isValid = ( paramObject ) => {
    // PARAMOBJECT BI T√ÅCH TH√ÄNH value, funcs, parentNode, controlNodes 
    const { value, funcs, parentNode, controlNodes } = paramObject;
    for ( const func of funcs ) {
        const msg = func( value );
        if ( msg ) { //msg c√≥
            createMsg( parentNode, controlNodes, msg );
            return msg;
        }
    }
    return '';
};

document.querySelector( 'form' ).addEventListener( 'submit', ( event ) => {
    event.preventDefault();
    // x√≥a th√¥ng b√°o c≈©
    clearMsg();
    // DOM ƒê·∫æN T·∫§T C·∫¢ C√ÅC NODE INPUT
    const emailNode = document.querySelector( '#email' );
    const nameNode = document.querySelector( '#name' );
    const genderNode = document.querySelector( '#gender' );
    // ƒê·ªêI V·ªöI COUNTRY N√ì S·∫º C·∫¶N ANH M√ìC V√ÄO TH·∫∞NG ƒê√É CHECKED
    const countryNode = document.querySelector( "input[name='country']:checked" );
    const password = document.querySelector( '#password' );
    const confirmedPassword = document.querySelector( '#confirmedPassword' );
    const agreeNode = document.querySelector( 'input#agree:checked' );

    // M·∫¢NG CH·ª®A C√ÅC CHU·ªñ TR·∫¢ RA SAU ISVALID
    const errorForm = [
        // email
        isValid( {
            value: emailNode.value,
            funcs: [isRequired, isEmail],
            parentNode: emailNode.parentElement,
            controlNodes: [emailNode]
        } ),

        // name
        isValid( {
            value: nameNode.value,
            funcs: [isRequired, isName, max( 50 )], //max 50 ung dung currying
            parentNode: nameNode.parentElement,
            controlNodes: [nameNode]
        } ),

        // gender
        isValid( {
            value: genderNode.value,
            funcs: [isRequired],
            parentNode: genderNode.parentElement,
            controlNodes: [genderNode]
        } ),

        // country
        isValid( {
            value: countryNode ? countryNode.value : '',
            funcs: [isRequired],
            parentNode: document.querySelector( '.form-check-country' ).parentElement,
            controlNodes: document.querySelectorAll( "input[name='country']" ),
        } ),

        // password
        isValid( {
            value: password.value,
            funcs: [isRequired, min( 8 ), max( 20 )],
            parentNode: password.parentElement,
            controlNodes: [password],
        } ),

        // confirm password
        isValid( {
            value: confirmedPassword.value,
            funcs: [isRequired, min( 8 ), max( 20 ), isSame( password.value, 'Password', 'Confirm password' )],
            parentNode: confirmedPassword.parentElement,
            controlNodes: [confirmedPassword],
        } ),

        // agree
        isValid( {
            value: agreeNode ? agreeNode.value : '',
            funcs: [isRequired],
            parentNode: document.querySelector( '#agree' ).parentElement,
            controlNodes: [document.querySelector( '#agree' )],
        } ),
    ];

    // errorForm l√† m·∫£ng ch·ª©a c√°c chu·ªói tr·∫£ ra sau ki·ªÉm tra 
    // m√¨nh s·∫Ω ki·ªÉm tra xem n·∫øu nh∆∞ errorForm kh√¥ng c√≥ item n√†o l√† chu·ªói kh√°c r·ªëng
    // th√¨ form oke | ng∆∞·ª£c l·∫°i th√¨ ko oke
    const isValidForm = errorForm.every( item => !item );
    if ( isValidForm ) {
        clearMsg();
        alert( 'Form is valid' );
    }
} );


















// // code A Diep
// //rule validate
// // email: required, isEmail
// // Name:  required, l√† t√™n ng∆∞·ªùi (ti·∫øng anh ho·∫∑c vi·ªát kh√¥ng ch·ª©a s·ªë), max 50 k√Ω t·ª±
// // Gi·ªõi t√≠nh: required
// // Qu·ªëc gia : required
// // Password: required, min(üòé, max(20)
// // ConfirmedPassword: required, min(üòé, max(20), isSame
// // agree : required
// const REG_EMAIL =
//     /^[a-zA-Z\d\.\-\_]+(\+\d+)?@[a-zA-Z\d\.\-\_]{1,65}\.[a-zA-z]{1,7}$/;
// const REG_NAME =
//     /^[a-zA-Z\u00C0-\u024F\u1E00-\u1EFF]+((\s[a-zA-Z\u00C0-\u024F\u1E00-\u1EFF]+)?)+$/;
// //m√¨nh s·∫Ω vi·∫øt m·∫•y c√°i h√†m nh·∫≠n v√†o value v√† check theo chu·∫©n g√¨ ƒë√≥ : n·∫øu h·ª£p y√™u c·∫ßu th√¨ ""
// // n·∫øu kh√¥ng h·ª£p y√™u c·∫ßu th√¨ ch·ªØi
// const isRequired = ( value ) =>
//     value.trim() !== "" ? "" : "That Field is required";
// const isEmail = ( value ) => ( REG_EMAIL.test( value ) ? "" : "Email not Validate" );
// const isName = ( value ) => ( REG_NAME.test( value ) ? "" : "Name is not validate" );
// const min = ( num ) => ( value ) => value.length >= num ? "" : Min is ${ num };
// const max = ( num ) => ( value ) => value.length <= num ? "" : Max is ${ num };
// const isSame = ( paramValue, fieldName1, fieldName2 ) => ( value ) => {
//     return paramValue === value ? "" : ${ fieldName1; } kh√¥ng kh·ªõp ${ fieldName2; };
// };
// //nh·ªØng kh√°i ni·ªám c·∫ßn n·∫Øm:
// //value: gi√° tr·ªã trong √¥ input
// //funcs: nh·ªØng h√†m s·∫Ω d√πng ƒë·ªÉ check value
// //      vd: ƒë·ªÉ check value email => funcs: [isRequired, isEmail]
// //      vd: ƒë·ªÉ check value password => funcs: [isRequired, min(üòé, max(20)]
// //parentNode: node cha c·ªßa value
// //controlNodes: th·∫±ng node input

// //vi·∫øt 1 h√†m d√πng ƒë·ªÉ b√°o l·ªói tr√™n t·ª´ng input
// const createMsg = ( parentNode, controlNodes, msg ) => {
//     //t·∫°o div th√¥ng b√°o l·ªói
//     const invalidDiv = document.createElement( "div" );
//     invalidDiv.className = "invalid-feedback";
//     invalidDiv.textContent = msg;
//     parentNode.appendChild( invalidDiv );
//     controlNodes.forEach( ( itemNode ) => {
//         itemNode.classList.add( "is-invalid" );
//     } );
// };

// //h√†m x√≥a c√°c msg
// const clearMsg = () => {
//     document.querySelectorAll( ".is-invalid" ).forEach( ( inputItem ) => {
//         inputItem.classList.remove( "is-invalid" );
//     } );
//     document.querySelectorAll( ".invalid-feedback" ).forEach( ( divMsg ) => {
//         divMsg.remove();
//     } );
// };
// //c·∫ßn 1 c√°i h√†m nh·∫≠n v√†o value, nh·∫≠n v√†o funcs, parentNode, controlNode
// //ƒë·ªÉ n√≥ d√πng c√°c funcs ki·ªÉm tra value, r·ªìi createMsg(parent,controlNode)
// const isValid = ( paramObject ) => {
//     //paramObject b·ªã t√°ch th√†nh value, funcs, parentNode, controlNodes
//     const { value, funcs, parentNode, controlNodes } = paramObject;
//     for ( const func of funcs ) {
//         const msg = func( value );
//         if ( msg ) {
//             //msg c√≥
//             createMsg( parentNode, controlNodes, msg );
//             return msg;
//         }
//     }
//     return "";
// };

// document.querySelector( "form" ).addEventListener( "submit", ( event ) => {
//     event.preventDefault();
//     //x√≥a th√¥ng b√°o c≈©
//     clearMsg();
//     //dom ƒë·∫øn t·∫•t c·∫£ c√°c node input
//     const emailNode = document.querySelector( "#email" );
//     const nameNode = document.querySelector( "#name" );
//     const genderNode = document.querySelector( "#gender" );
//     //ƒë·ªëi v·ªõi country n√≥ s·∫Ω c·∫ßn anh m√≥c v√†o th·∫±ng ƒë√£ checked
//     const countryNode = document.querySelector( "input[name='country']:checked" );
//     const password = document.querySelector( "#password" );
//     const confirmedpassword = document.querySelector( "#confirmedPassword" );
//     const agreeNode = document.querySelector( "input#agree:checked" );

//     //m·∫£ng ch·ª©a c√°ch chu·ªói tr·∫£ ra sau isValid
//     const errorForm = [
//         // email
//         isValid( {
//             value: emailNode.value,
//             funcs: [isRequired, isEmail],
//             parentNode: emailNode.parentElement,
//             controlNodes: [emailNode],
//         } ),
//         // name
//         isValid( {
//             value: nameNode.value,
//             funcs: [isRequired, isName, max( 50 )], //max(50) ·ª©ng d·ª•ng currying
//             parentNode: nameNode.parentElement,
//             controlNodes: [nameNode],
//         } ),
//         //gender
//         isValid( {
//             value: genderNode.value,
//             funcs: [isRequired],
//             parentNode: genderNode.parentElement,
//             controlNodes: [genderNode],
//         } ),
//         //Country
//         isValid( {
//             value: countryNode ? countryNode.value : "",
//             funcs: [isRequired],
//             parentNode: document.querySelector( ".form-check-country" )
//                 .parentElement,
//             controlNodes: document.querySelectorAll( "input[name='country']" ),
//         } ),
//         //password
//         isValid( {
//             value: password.value,
//             funcs: [isRequired, min(üòé, max( 20 )],
//             parentNode: password.parentElement,
//             controlNodes: [password],
//         } ),
//         //confirmedpassword
//         isValid( {
//             value: confirmedpassword.value,
//             funcs: [
//                 isRequired,
//                 min(üòé,
//                 max( 20 ),
//                 isSame( password.value, "Password", "Nh·∫≠p l·∫°i password" ),
//             ],
//             parentNode: confirmedpassword.parentElement,
//             controlNodes: [confirmedpassword],
//         } ),
//         //agree
//         isValid( {
//             value: agreeNode ? agreeNode.value : "",
//             funcs: [isRequired],
//             parentNode: document.querySelector( "#agree" ).parentElement,
//             controlNodes: [document.querySelector( "#agree" )],
//         } ),
//     ];

//     //errorForm l√† m·∫£ng ch·ª©a c√°c chu·ªói tr·∫£ ra sau ki·ªÉm tra
//     //m√¨nh s·∫Ω ki·ªÉm tra xem n·∫øu nh∆∞ errorForm kh√¥ng c√≥ item n√†o l√† chu·ªói kh√°c r·ªóng
//     //th√¨ form oke | ng∆∞·ª£c l·∫°i th√¨ k oke
//     const isValidForm = errorForm.every( ( item ) => !item );
//     if ( isValidForm ) {
//         clearMsg();
//         alert( "Form is valid" );
//     }
// } );











